function activate_conda() {
    local current_dir_name=$(basename "$PWD")
    local is_env=$(awk -F/ -v name="$current_dir_name" '$NF == name {print $NF}' ~/.conda/environments.txt )

    if [[ ! -z $is_env ]]; then
        source "/home/$USER/anaconda3/etc/profile.d/conda.sh" &> /dev/null
        conda activate $current_dir_name &> /dev/null
    # else
    #     conda activate $CONDA_DEFAULT_ENV
    fi
}

function config_opener(){
    local config_path=$1
    local program=$2
    local session_name=$2
    (alacritty -e zsh -c "tmux new-session -s '${session_name}' -c ${config_path} '${program}'" &) &>/dev/null
}

function nconfig(){
    config_opener "~/.config/nvim" "nvim" "nvim-config"
}

function note(){
    config_opener "~/notes/" "nvim" "note"
}

function tls() {
    active_session="$(tmux list-sessions 2>/dev/null)"
    if [[ ${#active_session} -ne 0 ]]; then
        echo "$active_session"
    else
        echo "No Session !!!"
    fi
}

function quick_tmux_call() {
    if [[ $# -eq 0 || $1 == "--help" || $1 == "-h" ]]; then
        echo "-h, --help : Display this help message."
        echo "\$1 : Name of the tmux session."
        echo "\$2 : Path to the directory for the session."
        echo "\$3 : Optional program to start in the session."
    else
        local session_name="$1"
        local dir_path="$2"
        local program="${3:-}"
        # Validate session name and directory path
        if [[ -z "$session_name" || -z "$dir_path" ]]; then
            echo "Error: Both session name and directory path are required."
            return 1
        fi
        # Check if session already exists
        if tmux has-session -t "$session_name" 2>/dev/null; then
            echo "Attaching to existing session '$session_name'."
            # Attach to the session
            tmux attach-session -t "$session_name"
        else
            # Create a new session in detached mode
            tmux -u new -s "$session_name" -c "$dir_path" "$program -c 'cd $dir_path'"
       fi
    fi
}

function keymap(){
    value=$(bindkey | fzf --ansi --reverse --preview="echo {} | awk '{print \$2}' ")
    if [ ! -z $value ]; then
        echo $value | awk '{print $2}' | xclip -selection clipboard
    fi
}

function yy() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}


nasm -f elf64 test.asm -o test.o   # assemble
ld test.o -o test                  # link                             # run

function compile(){
    local file_name=$1
    local output=$(echo $file_name | awk -F "." '{print $1}')
    local file_type=$(echo $file_name | awk -F "." '{print $2}')
    shift
    if [[ "$file_type" == "c" ]]; then
        gcc ${file_name} -o ${output} -lm $@
    elif [[ "$file_type" == "cpp" ]]; then
        g++ ${file_name} -o ${output} -lm $@
    elif [[ "$file_type" == "asm" ]]; then
        nasm -f elf64 -o "${output}.o" "${file_name}"
        ld "${output}.o" -o "${output}"
    else 
        echo "Unsupported file type: $file_type"
        return 1
    fi
}

function tt(){
    local wordlist=$1
    local num=$2
    if [[ "$num" =~ ^[0-9]+ ]]; then
        if [[ "$wordlist" =~ ^[0-9]+ ]]; then
            toipe -w top${wordlist} -n ${num}
        elif [[ "$wordlist" == "cms" ]]; then
            toipe -w commonly-misspelled -n ${num}
        else
            toipe -w ${wordlist} -n ${num}
        fi
    else
        echo "Invalid 2nd parameter."
    fi
}

function mirror() {
    case "$1" in
        on)
            echo 'Turning Mirror on...'
            hyprctl keyword monitor "eDP-1, 1920x1080@30, auto, 1, mirror, HDMI-A-1"
            ;;
        off)
            echo 'Turning Mirror off...'
            hyprctl keyword monitor "eDP-1, 1920x1080@60, auto, 1"
            hyprctl keyword monitor "HDMI-A-1, 1920x1080@60, auto, 1"
            ;;
        *)
            echo "Usage: mirror {on|off}"
            ;;
    esac
}

function start_droidcam(){
    sudo kill -9 1640 2634 31438
    sudo fuser -k /dev/video0
    sudo modprobe -r v4l2loopback
    sudo modprobe v4l2loopback devices=1 video_nr=0 card_label="DroidCam" exclusive_caps=1
    pkill droidcam
    droidcam
}

function mk() {
  vared -p 'Path: ' -c var
  mkdir "$var"
}

function to_audio() {
    if [ -z "$1" ]; then
        echo "Usage: to_audio <input_video_file>"
        return 1
    fi

    input="$1"
    filename=$(basename -- "$input")
    name="${filename%.*}"
    ffmpeg -i "$input" -vn -acodec copy "${name}_audio.aac"
}

